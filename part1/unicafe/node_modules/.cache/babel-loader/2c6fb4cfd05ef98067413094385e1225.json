{"ast":null,"code":"var _jsxFileName = \"/home/jaboamah/fullstackJS/fullstackJS/part1/unicafe/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react'; // -----------Introductory project---------------\n// ----------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst course = {\n  name: 'Half Stack application development',\n  parts: [{\n    name: 'Fundamentals of React',\n    exercises: 10\n  }, {\n    name: 'Using props to pass data',\n    exercises: 7\n  }, {\n    name: 'State of a component',\n    exercises: 14\n  }]\n};\n\nconst Head = props => {\n  console.log(props);\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: props.course\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Head;\n\nconst Part = props => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [props.part1, \" \", props.exercises1]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [props.part2, \" \", props.exercises2]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [props.part3, \" \", props.exercises3]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n\n_c2 = Part;\n\nconst Content = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Part, {\n      part1: course.parts[0].name,\n      exercises1: course.parts[0].exercises\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Part, {\n      part2: course.parts[1].name,\n      exercises2: course.parts[1].exercises\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Part, {\n      part3: course.parts[2].name,\n      exercises3: course.parts[2].exercises\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n\n_c3 = Content;\n\nconst Total = props => {\n  console.log(props);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Number of exercises \", props.exercises1 + props.exercises2 + props.exercises3]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}; // --------Unicafe Project------------------\n// -----------------------------------------\n\n\n_c4 = Total;\n\nconst Header = ({\n  text\n}) => /*#__PURE__*/_jsxDEV(\"h2\", {\n  children: text\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 65,\n  columnNumber: 30\n}, this);\n\n_c5 = Header;\n\nconst Button = ({\n  text,\n  handleClick\n}) => /*#__PURE__*/_jsxDEV(\"button\", {\n  onClick: handleClick,\n  children: text\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 67,\n  columnNumber: 43\n}, this); // Statistics component \n// const Statistics = ({ good, neutral, bad }) => {\n//   const all = good + neutral + bad\n//   const average = (good * 1 + bad * -1) / all\n//   const positiveFeedback = (good / all) * 100\n//   if (good === 0 && neutral === 0 && bad === 0) {\n//     return <div>\n//       <h2>statistics</h2>\n//       <p>No feedback given</p>\n//     </div>\n//   } else {\n//     return (\n//       <div>\n//         <h2>statistics</h2>\n//         <p>good {good}</p>\n//         <p>neutral {neutral}</p>\n//         <p>bad {bad}</p>\n//         <p>all {all}</p>\n//         <p>average {average}</p>\n//         <p>positive {positiveFeedback} %</p>\n//       </div>\n//     )\n//   }\n// }\n\n\n_c6 = Button;\n\nconst Statistics = ({\n  text,\n  value\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n};\n\n_c7 = Statistics;\n\nconst App = () => {\n  _s();\n\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const handleGood = () => setGood(good + 1);\n\n  const handleNeutral = () => setNeutral(neutral + 1);\n\n  const handleBad = () => setBad(bad + 1);\n\n  const all = good + neutral + bad;\n  const average = (good * 1 + bad * -1) / all;\n  const positiveFeedback = good / all * 100;\n  const anecdotes = ['If it hurts, do it more often', 'Adding manpower to a late software project makes it later!', 'The first 90 percent of the code accounts for the first 90 percent of the development time...The remaining 10 percent of the code accounts for the other 90 percent of the development time.', 'Any fool can write code that a computer can understand. Good programmers write code that humans can understand.', 'Premature optimization is the root of all evil.', 'Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it.']; // Get the a random index of anecdotes\n\n  const [selected, setSelected] = useState(0);\n  const getIndex = Math.floor(Math.random() * anecdotes.length); // selected = (anecdotes[getIndex])\n  // const handleAnecdote = () => {\n  //   return (\n  //     <div>\n  //         sets\n  //     </div>\n  //   )\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      text: \"give feedback\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      handleClick: handleGood,\n      text: \"good\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      handleClick: handleNeutral,\n      text: \"neutral\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      handleClick: handleBad,\n      text: \"bad\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Header, {\n      text: \"statistics\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Statistics, {\n      text: \"good\",\n      value: good\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Statistics, {\n      text: \"neutral\",\n      value: neutral\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Statistics, {\n      text: \"bad\",\n      value: bad\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Statistics, {\n      text: \"all\",\n      value: all\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Statistics, {\n      text: \"average\",\n      value: isNaN(average) ? 0 : average\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Statistics, {\n      text: \"positive\",\n      value: isNaN(positiveFeedback) ? 0 : positiveFeedback\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"RxhkmW47NNamoGAIRkOuKECM0Xk=\");\n\n_c8 = App;\nexport default App;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8;\n\n$RefreshReg$(_c, \"Head\");\n$RefreshReg$(_c2, \"Part\");\n$RefreshReg$(_c3, \"Content\");\n$RefreshReg$(_c4, \"Total\");\n$RefreshReg$(_c5, \"Header\");\n$RefreshReg$(_c6, \"Button\");\n$RefreshReg$(_c7, \"Statistics\");\n$RefreshReg$(_c8, \"App\");","map":{"version":3,"sources":["/home/jaboamah/fullstackJS/fullstackJS/part1/unicafe/src/App.js"],"names":["React","useState","course","name","parts","exercises","Head","props","console","log","Part","part1","exercises1","part2","exercises2","part3","exercises3","Content","Total","Header","text","Button","handleClick","Statistics","value","App","good","setGood","neutral","setNeutral","bad","setBad","handleGood","handleNeutral","handleBad","all","average","positiveFeedback","anecdotes","selected","setSelected","getIndex","Math","floor","random","length","isNaN"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\n\n// -----------Introductory project---------------\n// ----------------------------------------------\nconst course = {\n  name: 'Half Stack application development',\n  parts: [\n    {\n      name: 'Fundamentals of React',\n      exercises: 10\n    },\n    {\n      name: 'Using props to pass data',\n      exercises: 7\n    },\n    {\n      name: 'State of a component',\n      exercises: 14\n    }\n  ]\n}\n\n\n\nconst Head = (props) => {\n  console.log(props)\n  return (\n    <h1>{props.course}</h1>\n  )\n}\n\nconst Part = (props) => {\n  return (\n    <div>\n      <p>{props.part1} {props.exercises1}</p>\n      <p>{props.part2} {props.exercises2}</p>\n      <p>{props.part3} {props.exercises3}</p>\n    </div>\n  )\n}\n\n\nconst Content = () => {\n  return (\n    <div>\n      <Part part1={course.parts[0].name} exercises1={course.parts[0].exercises} />\n      <Part part2={course.parts[1].name} exercises2={course.parts[1].exercises} />\n      <Part part3={course.parts[2].name} exercises3={course.parts[2].exercises} />\n    </div>\n  )\n}\n\nconst Total = (props) => {\n  console.log(props)\n  return (\n    <div>\n      <p>Number of exercises {props.exercises1 + props.exercises2 + props.exercises3}</p>\n    </div>\n  )\n}\n\n// --------Unicafe Project------------------\n// -----------------------------------------\n\nconst Header = ({ text }) => <h2>{text}</h2>\n\nconst Button = ({ text, handleClick }) => <button onClick={handleClick}>{text}</button>\n\n// Statistics component \n// const Statistics = ({ good, neutral, bad }) => {\n//   const all = good + neutral + bad\n//   const average = (good * 1 + bad * -1) / all\n//   const positiveFeedback = (good / all) * 100\n\n//   if (good === 0 && neutral === 0 && bad === 0) {\n//     return <div>\n//       <h2>statistics</h2>\n//       <p>No feedback given</p>\n//     </div>\n//   } else {\n//     return (\n//       <div>\n//         <h2>statistics</h2>\n//         <p>good {good}</p>\n//         <p>neutral {neutral}</p>\n//         <p>bad {bad}</p>\n//         <p>all {all}</p>\n//         <p>average {average}</p>\n//         <p>positive {positiveFeedback} %</p>\n//       </div>\n//     )\n//   }\n// }\n\nconst Statistics = ({ text, value }) => {\n  return (\n    <table>\n      <tbody>\n        <tr>\n          <td>{text}</td>\n          <td>{value}</td>\n        </tr>\n      </tbody>\n    </table>\n  )\n}\n\nconst App = () => {\n\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\n\n  const handleGood = () => setGood(good + 1)\n\n  const handleNeutral = () => setNeutral(neutral + 1)\n\n  const handleBad = () => setBad(bad + 1)\n\n  const all = good + neutral + bad\n  const average = (good * 1 + bad * -1) / all\n  const positiveFeedback = (good / all) * 100\n\n  const anecdotes = [\n    'If it hurts, do it more often',\n    'Adding manpower to a late software project makes it later!',\n    'The first 90 percent of the code accounts for the first 90 percent of the development time...The remaining 10 percent of the code accounts for the other 90 percent of the development time.',\n    'Any fool can write code that a computer can understand. Good programmers write code that humans can understand.',\n    'Premature optimization is the root of all evil.',\n    'Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it.'\n  ]\n\n  // Get the a random index of anecdotes\n  const [selected, setSelected] = useState(0)\n\n  const getIndex = Math.floor(Math.random() * (anecdotes.length))\n  // selected = (anecdotes[getIndex])\n\n  // const handleAnecdote = () => {\n  //   return (\n  //     <div>\n  //         sets\n  //     </div>\n\n  //   )\n  // }\n\n  return (\n\n    <div>\n      <Header text='give feedback' />\n      <Button handleClick={handleGood} text='good' />\n      <Button handleClick={handleNeutral} text='neutral' />\n      <Button handleClick={handleBad} text='bad' />\n      <Header text='statistics' />\n      <Statistics text='good' value={good} />\n      <Statistics text='neutral' value={neutral} />\n      <Statistics text='bad' value={bad} />\n      <Statistics text='all' value={all} />\n      <Statistics text='average' value={isNaN(average) ? 0 : average} />\n      <Statistics text='positive' value={isNaN(positiveFeedback) ? 0 : positiveFeedback} />\n      {/* <Button onClick={handleAnecdote} text='next anecdote' /> */}\n      {/* <Statistics good={good} neutral={neutral} bad={bad} /> */}\n      {/* <Header course={course.name} /> */}\n      {/* <Content /> */}\n      {/* <Total exercises1={course.parts[0].exercises} exercises2={course.parts[1].exercises} exercises3={course.parts[2].exercises} /> */}\n    </div>\n  )\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}